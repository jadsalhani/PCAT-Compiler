/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>pcat.flex</tt>
 */
public class PCATScanner implements ReservedWords, Delimiters, Operators, TokenLiteral {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\66\1\67\1\3\22\0\1\5\1\0\1\57"+
    "\4\0\1\60\1\6\1\10\1\7\1\54\1\47\1\55\1\11\1\56"+
    "\12\2\1\50\1\46\1\53\1\51\1\52\2\0\1\14\1\21\1\36"+
    "\1\16\1\22\1\31\1\23\1\40\1\24\2\1\1\27\1\35\1\15"+
    "\1\26\1\34\1\1\1\17\1\30\1\33\1\37\1\25\1\41\1\32"+
    "\1\20\1\1\1\44\1\12\1\45\1\0\1\13\1\0\1\1\1\61"+
    "\3\1\1\64\7\1\1\63\3\1\1\65\1\1\1\62\6\1\1\42"+
    "\1\0\1\43\7\0\1\66\u1fa2\0\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\1\16\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\31\1\1\1\32\2\33\1\1"+
    "\1\34\1\35\1\36\3\2\1\37\1\2\1\40\4\2"+
    "\1\41\1\42\1\2\1\43\1\44\3\2\1\45\5\2"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\3\35\1\63\1\2"+
    "\1\64\4\2\1\65\2\2\1\66\1\2\1\67\3\2"+
    "\1\70\2\2\1\4\1\2\1\71\3\2\1\72\1\73"+
    "\1\74\1\75\1\76\4\2\1\77\2\2\1\100\3\2"+
    "\1\101\1\102\1\103\1\104\1\105\2\2\1\106\2\2"+
    "\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\250"+
    "\0\u0188\0\250\0\250\0\250\0\u01c0\0\u01f8\0\u0230\0\u0268"+
    "\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428"+
    "\0\u0460\0\u0498\0\u04d0\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\u0508\0\250\0\u0540\0\u0578\0\250\0\250\0\250"+
    "\0\250\0\250\0\u05b0\0\u05e8\0\250\0\u0620\0\250\0\u0658"+
    "\0\250\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0"+
    "\0\340\0\u0818\0\340\0\u0850\0\u0888\0\u08c0\0\u08f8\0\340"+
    "\0\340\0\u0930\0\340\0\340\0\u0968\0\u09a0\0\u09d8\0\340"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\u0b28\0\250\0\u0b60\0\340\0\u0b98\0\340"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\340\0\u0cb0\0\u0ce8\0\340"+
    "\0\u0d20\0\340\0\u0d58\0\u0d90\0\u0dc8\0\340\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\340\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\340"+
    "\0\340\0\340\0\340\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\340"+
    "\0\u10a0\0\u10d8\0\340\0\u1110\0\u1148\0\u1180\0\340\0\340"+
    "\0\340\0\340\0\340\0\u11b8\0\u11f0\0\340\0\u1228\0\u1260"+
    "\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13"+
    "\1\14\1\4\1\15\1\16\1\5\1\17\1\20\1\5"+
    "\1\21\1\22\1\5\1\23\1\24\1\25\1\26\1\5"+
    "\1\27\1\5\1\30\1\31\1\32\3\5\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\5\5\1\4"+
    "\1\10\3\53\1\54\1\55\5\53\1\56\44\53\1\57"+
    "\10\53\3\4\1\60\1\61\5\4\1\62\55\4\71\0"+
    "\2\5\11\0\26\5\17\0\5\5\4\0\1\6\6\0"+
    "\1\63\62\0\1\10\72\0\1\64\61\0\1\65\12\0"+
    "\26\65\17\0\5\65\3\0\2\5\11\0\1\5\1\66"+
    "\1\5\1\67\22\5\17\0\5\5\3\0\2\5\11\0"+
    "\10\5\1\70\1\5\1\71\13\5\17\0\5\5\3\0"+
    "\2\5\11\0\6\5\1\72\17\5\17\0\5\5\3\0"+
    "\2\5\11\0\4\5\1\73\1\5\1\74\17\5\17\0"+
    "\5\5\3\0\2\5\11\0\1\5\1\75\11\5\1\76"+
    "\2\5\1\77\7\5\17\0\5\5\3\0\2\5\11\0"+
    "\14\5\1\100\1\101\10\5\17\0\5\5\3\0\2\5"+
    "\11\0\1\102\25\5\17\0\5\5\3\0\2\5\11\0"+
    "\3\5\1\103\11\5\1\104\10\5\17\0\5\5\3\0"+
    "\2\5\11\0\12\5\1\105\13\5\17\0\5\5\3\0"+
    "\2\5\11\0\12\5\1\106\13\5\17\0\5\5\3\0"+
    "\2\5\11\0\4\5\1\107\5\5\1\110\11\5\1\111"+
    "\1\5\17\0\5\5\3\0\2\5\11\0\3\5\1\112"+
    "\22\5\17\0\5\5\3\0\2\5\11\0\12\5\1\113"+
    "\13\5\17\0\5\5\3\0\2\5\11\0\3\5\1\114"+
    "\20\5\1\115\1\5\17\0\5\5\53\0\1\116\67\0"+
    "\1\117\67\0\1\120\1\121\15\0\3\53\2\0\5\53"+
    "\1\0\44\53\1\0\10\53\4\0\1\55\63\0\3\122"+
    "\2\0\5\122\1\123\44\122\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\6\0\1\61\63\0\3\122\2\0"+
    "\61\122\4\0\1\63\65\0\3\64\1\133\1\134\2\64"+
    "\1\135\60\64\1\0\2\65\11\0\26\65\17\0\5\65"+
    "\3\0\2\5\11\0\2\5\1\136\23\5\17\0\5\5"+
    "\3\0\2\5\11\0\3\5\1\137\22\5\17\0\5\5"+
    "\3\0\2\5\11\0\11\5\1\140\14\5\17\0\5\5"+
    "\3\0\2\5\11\0\1\141\16\5\1\142\2\5\1\143"+
    "\3\5\17\0\5\5\3\0\2\5\11\0\7\5\1\144"+
    "\16\5\17\0\5\5\3\0\2\5\11\0\2\5\1\145"+
    "\23\5\17\0\5\5\3\0\2\5\11\0\14\5\1\146"+
    "\11\5\17\0\5\5\3\0\2\5\11\0\10\5\1\147"+
    "\15\5\17\0\5\5\3\0\2\5\11\0\3\5\1\150"+
    "\22\5\17\0\5\5\3\0\2\5\11\0\12\5\1\151"+
    "\13\5\17\0\5\5\3\0\2\5\11\0\3\5\1\152"+
    "\22\5\17\0\5\5\3\0\2\5\11\0\20\5\1\153"+
    "\5\5\17\0\5\5\3\0\2\5\11\0\6\5\1\154"+
    "\17\5\17\0\5\5\3\0\2\5\11\0\12\5\1\155"+
    "\13\5\17\0\5\5\3\0\2\5\11\0\2\5\1\156"+
    "\23\5\17\0\5\5\3\0\2\5\11\0\10\5\1\157"+
    "\15\5\17\0\5\5\3\0\2\5\11\0\10\5\1\160"+
    "\15\5\17\0\5\5\6\0\1\134\63\0\3\64\1\133"+
    "\1\134\2\64\1\135\1\161\57\64\1\0\2\5\11\0"+
    "\1\162\25\5\17\0\5\5\3\0\2\5\11\0\2\5"+
    "\1\163\23\5\17\0\5\5\3\0\2\5\11\0\23\5"+
    "\1\164\2\5\17\0\5\5\3\0\2\5\11\0\12\5"+
    "\1\165\13\5\17\0\5\5\3\0\2\5\11\0\10\5"+
    "\1\166\15\5\17\0\5\5\3\0\2\5\11\0\6\5"+
    "\1\167\17\5\17\0\5\5\3\0\2\5\11\0\17\5"+
    "\1\170\6\5\17\0\5\5\3\0\2\5\11\0\20\5"+
    "\1\171\5\5\17\0\5\5\3\0\2\5\11\0\6\5"+
    "\1\172\17\5\17\0\5\5\3\0\2\5\11\0\1\5"+
    "\1\173\24\5\17\0\5\5\3\0\2\5\11\0\7\5"+
    "\1\174\12\5\1\175\3\5\17\0\5\5\3\0\2\5"+
    "\11\0\17\5\1\176\6\5\17\0\5\5\3\0\2\5"+
    "\11\0\13\5\1\177\12\5\17\0\5\5\2\0\3\64"+
    "\1\7\1\10\2\64\1\135\60\64\1\0\2\5\11\0"+
    "\4\5\1\200\21\5\17\0\5\5\3\0\2\5\11\0"+
    "\3\5\1\201\22\5\17\0\5\5\3\0\2\5\11\0"+
    "\3\5\1\202\22\5\17\0\5\5\3\0\2\5\11\0"+
    "\1\5\1\203\24\5\17\0\5\5\3\0\2\5\11\0"+
    "\10\5\1\204\15\5\17\0\5\5\3\0\2\5\11\0"+
    "\3\5\1\205\22\5\17\0\5\5\3\0\2\5\11\0"+
    "\6\5\1\206\17\5\17\0\5\5\3\0\2\5\11\0"+
    "\6\5\1\207\17\5\17\0\5\5\3\0\2\5\11\0"+
    "\6\5\1\210\17\5\17\0\5\5\3\0\2\5\11\0"+
    "\1\5\1\211\24\5\17\0\5\5\3\0\2\5\11\0"+
    "\2\5\1\212\23\5\17\0\5\5\3\0\2\5\11\0"+
    "\15\5\1\213\10\5\17\0\5\5\3\0\2\5\11\0"+
    "\1\214\25\5\17\0\5\5\3\0\2\5\11\0\2\5"+
    "\1\215\23\5\17\0\5\5\3\0\2\5\11\0\21\5"+
    "\1\216\4\5\17\0\5\5\3\0\2\5\11\0\23\5"+
    "\1\217\2\5\17\0\5\5\3\0\2\5\11\0\3\5"+
    "\1\220\22\5\17\0\5\5\3\0\2\5\11\0\6\5"+
    "\1\221\17\5\17\0\5\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\1\1\3\11\17\1\6\11"+
    "\1\1\1\11\2\1\5\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\34\1\15\11\1\1\1\11\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
StringBuilder string = new StringBuilder();
OperatorHandler operatorHandler = new OperatorHandler();
SymbolTable symbolTable = new SymbolTable();

private int symbol(String token) {
SymbolManager symbol = new SymbolManager(token, yyline+1, yycolumn+1);
System.out.println(symbol.toString());
if(token.equals("EOF")){
System.out.println("Printing symbol table entries:");
symbolTable.printTokens();
}
return 1;
}

private int symbol(String token, Object value) {
SymbolManager symbol = new SymbolManager(token, yyline+1, yycolumn+1, value);
System.out.println(symbol.toString());
symbolTable.addToken(value.toString(), token);
return 1;
}

private int symbol(String token, Object value, OperatorHandler operatorHandler) {
SymbolManager symbol = new SymbolManager(token, yyline+1, yycolumn+1, value, operatorHandler);
System.out.println(symbol.toString());
symbolTable.addToken(token, operatorHandler.getOperagetTokenValue(token));
return 1;
}

public boolean getEOF(){
    return zzAtEOF;
}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PCATScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return symbol("EOF");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println(new RuntimeException("Unrecognized Symbol \""+yytext()+
                                    "\" at line "+yyline+", column "+yycolumn+ ". Skipping"));
            }
          case 72: break;
          case 2: 
            { return symbol(IDENTIFIER_LIT, yytext());
            }
          case 73: break;
          case 3: 
            { return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 74: break;
          case 4: 
            { /* ignore */
            }
          case 75: break;
          case 5: 
            { return symbol(LEFT_PAREN, yytext());
            }
          case 76: break;
          case 6: 
            { return symbol(TIMES, yytext(), operatorHandler);
            }
          case 77: break;
          case 7: 
            { return symbol(RIGHT_PAREN, yytext());
            }
          case 78: break;
          case 8: 
            { return symbol(DOT, yytext());
            }
          case 79: break;
          case 9: 
            { return symbol(LEFT_BRACE, yytext());
            }
          case 80: break;
          case 10: 
            { return symbol(RIGHT_BRACE, yytext());
            }
          case 81: break;
          case 11: 
            { return symbol(LEFT_BRACKET, yytext());
            }
          case 82: break;
          case 12: 
            { return symbol(RIGHT_BRACKET, yytext());
            }
          case 83: break;
          case 13: 
            { return symbol(SEMI_COLON, yytext());
            }
          case 84: break;
          case 14: 
            { return symbol(COMMA, yytext());
            }
          case 85: break;
          case 15: 
            { return symbol(COLON, yytext());
            }
          case 86: break;
          case 16: 
            { return symbol(EQUAL, yytext(), operatorHandler);
            }
          case 87: break;
          case 17: 
            { return symbol(GREATER_THAN, yytext(), operatorHandler);
            }
          case 88: break;
          case 18: 
            { return symbol(LESS_THAN, yytext(), operatorHandler);
            }
          case 89: break;
          case 19: 
            { return symbol(ADD, yytext(), operatorHandler);
            }
          case 90: break;
          case 20: 
            { return symbol(SUBSTRACT, yytext(), operatorHandler);
            }
          case 91: break;
          case 21: 
            { return symbol(DIVIDE, yytext(), operatorHandler);
            }
          case 92: break;
          case 22: 
            { yybegin(STRING); string.setLength(0);
            }
          case 93: break;
          case 23: 
            { yybegin(CHARLITERAL);
            }
          case 94: break;
          case 24: 
            { string.append( yytext() );
            }
          case 95: break;
          case 25: 
            { System.out.println(new RuntimeException("Error at line " + yyline
                                    + ", column " + yycolumn +
                                    ", Unterminated string. Skipping"));
            }
          case 96: break;
          case 26: 
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
          case 97: break;
          case 27: 
            { System.out.println(new RuntimeException("Unterminated character literal at end of line"));
            }
          case 98: break;
          case 28: 
            { return symbol(REAL_LITERAL, new Float((yytext())));
            }
          case 99: break;
          case 29: 
            { throw new RuntimeException("Error at line " + yyline +
                                        ", column " + yycolumn + ", Dangling comment. Exiting");
            }
          case 100: break;
          case 30: 
            { System.out.println(new RuntimeException("Error at line " + yyline
                                    + ",column " + yycolumn + ", Identifier "
                                    + yytext() + " must begin with a letter. Skipping"));
            }
          case 101: break;
          case 31: 
            { return symbol(DO, yytext());
            }
          case 102: break;
          case 32: 
            { return symbol(BY, yytext());
            }
          case 103: break;
          case 33: 
            { return symbol(IS, yytext());
            }
          case 104: break;
          case 34: 
            { return symbol(IF, yytext());
            }
          case 105: break;
          case 35: 
            { return symbol(OR, yytext());
            }
          case 106: break;
          case 36: 
            { return symbol(OF, yytext());
            }
          case 107: break;
          case 37: 
            { return symbol(TO, yytext());
            }
          case 108: break;
          case 38: 
            { return symbol(ASSIGN, yytext(), operatorHandler);
            }
          case 109: break;
          case 39: 
            { return symbol(GREATER_THAN_EQUAL, yytext());
            }
          case 110: break;
          case 40: 
            { return symbol(LESS_THAN_EQUAL, yytext(), operatorHandler);
            }
          case 111: break;
          case 41: 
            { return symbol(NOT_EQUAL, yytext(), operatorHandler);
            }
          case 112: break;
          case 42: 
            { System.out.println(new RuntimeException("Illegal escape sequence \""+yytext()+"\""));
            }
          case 113: break;
          case 43: 
            { string.append( '\\' );
            }
          case 114: break;
          case 44: 
            { string.append( '\"' );
            }
          case 115: break;
          case 45: 
            { string.append( '\'' );
            }
          case 116: break;
          case 46: 
            { string.append( '\b' );
            }
          case 117: break;
          case 47: 
            { string.append( '\t' );
            }
          case 118: break;
          case 48: 
            { string.append( '\n' );
            }
          case 119: break;
          case 49: 
            { string.append( '\f' );
            }
          case 120: break;
          case 50: 
            { string.append( '\r' );
            }
          case 121: break;
          case 51: 
            { return symbol(AND, yytext());
            }
          case 122: break;
          case 52: 
            { return symbol(DIV, yytext());
            }
          case 123: break;
          case 53: 
            { return symbol(END, yytext());
            }
          case 124: break;
          case 54: 
            { return symbol(VAR, yytext());
            }
          case 125: break;
          case 55: 
            { return symbol(FOR, yytext());
            }
          case 126: break;
          case 56: 
            { return symbol(MOD, yytext());
            }
          case 127: break;
          case 57: 
            { return symbol(READ, yytext());
            }
          case 128: break;
          case 58: 
            { return symbol(ELSE, yytext());
            }
          case 129: break;
          case 59: 
            { return symbol(EXIT, yytext());
            }
          case 130: break;
          case 60: 
            { return symbol(LOOP, yytext());
            }
          case 131: break;
          case 61: 
            { return symbol(TYPE, yytext());
            }
          case 132: break;
          case 62: 
            { return symbol(THEN, yytext());
            }
          case 133: break;
          case 63: 
            { return symbol(ARRAY, yytext());
            }
          case 134: break;
          case 64: 
            { return symbol(BEGIN, yytext());
            }
          case 135: break;
          case 65: 
            { return symbol(WRITE, yytext());
            }
          case 136: break;
          case 66: 
            { return symbol(WHILE, yytext());
            }
          case 137: break;
          case 67: 
            { return symbol(RETURN, yytext());
            }
          case 138: break;
          case 68: 
            { return symbol(RECORD, yytext());
            }
          case 139: break;
          case 69: 
            { return symbol(ELSEIF, yytext());
            }
          case 140: break;
          case 70: 
            { return symbol(PROGRAM, yytext());
            }
          case 141: break;
          case 71: 
            { return symbol(PROCEDURE, yytext());
            }
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PCATScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PCATScanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PCATScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
